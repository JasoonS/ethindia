{"version":3,"sources":["web3ProvideSwitcher.ts","components/TokenIdContext.tsx","components/throttledDrizzelConnect.js","components/ContractData.tsx","components/USDPriceContext.tsx","components/TokenOverview.tsx","components/Offline.js","components/BuyModal.tsx","components/UpdateModal.tsx","lib/ipfs.js","components/UploadImage.js","components/Dapp.tsx","components/About.js","components/HowItworks.js","components/PreloadedImageContext.tsx","components/Template.tsx","App.js","index.tsx"],"names":["getInjectedWeb3","_ref","Object","_home_jasoons_Documents_india_hackathon_ethindia_app_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_3__","_home_jasoons_Documents_india_hackathon_ethindia_app_node_modules_babel_preset_react_app_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_2___default","a","mark","_callee","_window","ethereum","_ref2","currentProvider","provider","wrap","_context","prev","next","window","enable","abrupt","providerInjected","t0","web3","Web3","providers","WebsocketProvider","t1","Error","stop","apply","this","arguments","getInjectedWeb3NoLoad","error","console","log","Web3ProviderSwitcher","_home_jasoons_Documents_india_hackathon_ethindia_app_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","injectedWeb3","defaultWeb3","usingInjectedWeb3","instance","_getInjectedWeb3NoLoa","_context2","_this","Proxy","get","obj","prop","__webpack_exports__","TokenIdContext","createContext","TokenIdProvider","children","tokenId","react_default","createElement","Provider","value","connectTokenId","WrappedComponent","props","useContext","newProps","objectSpread","throttledDrizzelConnect","interval","inThrottle","Component","mapStateToProps","MemoComponent","React","memo","prevProps","nextProps","setTimeout","drizzleConnect","ContractData","context","_this$contracts$_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","utils","contracts","methodArgs","drizzle","state","dataKey","contract","methods","method","cacheCall","concat","toConsumableArray","_this$contracts$nextP","didContractChange","didMethodChange","didArgsChange","JSON","stringify","setState","initialized","pendingSpinner","synced","hideIndicator","displayData","toUtf8","hexToUtf8","toAscii","hexToAscii","toEth","fromWei","toDate","moment","parseInt","toString","Array","isArray","displayListItems","map","datum","index","key","i","displayObjectProps","keys","forEach","push","contextTypes","PropTypes","object","UsdPriceContext","DisplayComponent","combinedCollected","vitalikPriceEth","foreclosureTime","usdPrice","priceOfGorillaInUsd","parseFloat","isForeclosed","Date","parse","toUTCString","className","Fragment","components_ContractData","toFixed","ActionSection","getTotalCollected","bind","assertThisInitialized","getPatronageOwed","getVitalikPriceEth","patronageOwedKey","VitalikSteward","patronageOwed","foreclosureTimeKey","totalCollectedKey","totalCollected","vitalikPrice","BN","_this$state","TokenOverview_DisplayComponent","drizzleStatus","Children","only","alternateLoader","status","accounts","BuyModal","inputs","closeModal","e","preventDefault","isOpen","currentTxIndex","openModal","asyncToGenerator","regenerator_default","connectedToInjectedWeb3","web3ProvideSwitcher","switchToInjectedWeb3","sent","_x","handleInputChange","handleSubmit","abi","contractFunctions","length","name","j","foreclosed","then","priceKey","price","event","args","artworkPrice","toWei","add","cacheSend","_newPrice","_this$props","transactions","transactionStack","defineProperty","target","type","test","valueLabel","_this$props2","transactionStatus","txHash","txComplete","transactionProcessing","index_es","mainColor","size","onClick","width","p","Text","icononly","icon","color","position","top","right","mt","mr","mb","react","h3","href","onSubmit","placeholder","onChange","style","startAdornment","InputAdornment_default","TokenOverview","px","py","borderTop","borderColor","justifyContent","ml","ModalState","data","queryParams","formData","FormData","append","fetch","body","r","json","pin","ipfsHash","cat","text","UploadProgress","image","_ref$uploadProgress","uploadProgress","progress","done","pinned","progPercent","ipfsDagSize","Processing","my","message","UploadImage","updateImageHashOnSmartContract","_useState","useState","_useState2","slicedToArray","currentImage","setCurrentImage","progressRef","useRef","UploadImage_UploadProgress","current","id","evt","reader","FileReader","file","files","ipfsApproxDagSize","onload","_ref3","upload","result","Blob","Buffer","from","Hash","readAsDataURL","encType","required","imageHash","modalState","handleSubmitOfWebsite","inputValue","updateUrl","handleWebsiteInputChange","Closed","setDepositWithdrawToggle","depositState","depositAvailable","balance","inputValueRawMaybe","inputValueRaw","Deposit","contractFunction","Price","updateWebsiteUrl","_this2","depositKey","depositAbleToWithdraw","depositObj","eth","getBalance","_this3","checked","label","components_UploadImage","alternateBasicImage","initialImageDetailsLoaded","initialImageDetails","urls","src","rootCdnUrl","images","Dapp","limit","throttleCreator","getBase64Image","hash","hasStartedLoadingIpfsImage","base64Image","calcTotalMonthRevenue","ad1","ad2","ad3","totalMonthRevenue","tokenOwner","hasheKey","hashes","urlKey","websiteUrl","urlNext","hashNext","tokenOwnerKey","ERC721Full","ownerOf","tokenOwnerObj","showDapp","isTokenOwner","displayPreloadedImages","displayImage","imageSrc","adLink","Offline","displayPurchase","UpdateModal","components_BuyModal","margin","padding","display","DappConnected","DappWrapper","About","transform","Outline","HowItWorks","PreloadImageContext","PreloadImageProvider","isLoaded","useEffect","anotherValue","TotalRaised","pricesSet","prices","Promise","all","_","foreclosedPromise","_x2","textAlign","reduce","tot","num","Template","drizzleLoaded","toast","info","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","imageDataLoaded","react_toastify","lib_default","onToggle","TokenIdContext_TokenIdProvider","components_Dapp","data-href","data-layout","data-size","data-show-count","components_About","HowItworks","Template_TotalRaised","InnerComponent","preloadImage","components_Template","PreloadedImageContext_PreloadImageProvider","DrizzleProvider","lazy","__webpack_require__","App","fallback","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.bb0afd05.chunk.js","sourcesContent":["import HDWalletProvider from \"truffle-hdwallet-provider\"\nimport Web3 from \"web3\"\n\nconst getInjectedWeb3 = async (): Promise<{ provider: any, providerInjected: boolean }> => {\n\n  if (window.ethereum) {\n    const { ethereum } = window\n    try {\n      await ethereum.enable()\n      return { provider: ethereum, providerInjected: true }\n    } catch (error) {\n      // User denied account access...\n    }\n  } else if (typeof (<any>window).web3 !== 'undefined') {\n    // Checking if Web3 has been injected by the browser (Mist/MetaMask)\n    // Use Mist/MetaMask's provider.\n    const { currentProvider } = new Web3((<any>window).web3.currentProvider)\n\n    return { provider: currentProvider, providerInjected: true }\n  }\n  try {\n    // Web3 in drizzle seems to have a bug with websockts, using http-provider so long\n    var provider = new Web3.providers.WebsocketProvider(\n      \"wss://mainnet.infura.io/ws/v3/e811479f4c414e219e7673b6671c2aba\"\n    )\n    return { provider, providerInjected: false }\n  } catch (error) {\n    // Out of web3 options; throw.\n    throw new Error('Cannot find injected web3 or valid fallback.')\n  }\n}\nconst getInjectedWeb3NoLoad = (): { provider: any, providerInjected: boolean } => {\n\n  if (window.ethereum) {\n    const { ethereum } = window\n    try {\n      return { provider: ethereum, providerInjected: true }\n    } catch (error) {\n      // User denied account access...\n      console.log(error)\n    }\n  } else if (typeof (<any>window).web3 !== 'undefined') {\n    console.log('we have the window web3')\n    // Checking if Web3 has been injected by the browser (Mist/MetaMask)\n    // Use Mist/MetaMask's provider.\n    const { currentProvider } = new Web3((<any>window).web3.currentProvider)\n\n    return { provider: currentProvider, providerInjected: true }\n  }\n  try {\n    // Web3 in drizzle seems to have a bug with websockts, using http-provider so long\n    const provider = new Web3.providers.WebsocketProvider(\n      \"wss://mainnet.infura.io/ws/v3/e811479f4c414e219e7673b6671c2aba\"\n    )\n    return { provider, providerInjected: false }\n  } catch (error) {\n    // Out of web3 options; throw.\n    throw new Error('Cannot find injected web3 or valid fallback.')\n  }\n}\nclass Web3ProviderSwitcher {\n\n  public static instance: Web3ProviderSwitcher\n  public injectedWeb3: any = null\n  public defaultWeb3: any\n  public providerInjected: boolean = false\n  public usingInjectedWeb3: boolean = false\n\n  constructor() {\n    if (Web3ProviderSwitcher.instance) { return Web3ProviderSwitcher.instance }\n    Web3ProviderSwitcher.instance = this\n\n    const { provider, providerInjected } = getInjectedWeb3NoLoad()\n    this.providerInjected = providerInjected\n    this.defaultWeb3 = provider\n  }\n\n\n  public async switchToInjectedWeb3() {\n    try {\n      const { provider: web3, providerInjected } = await getInjectedWeb3()\n      this.injectedWeb3 = web3\n      this.providerInjected = providerInjected\n      this.usingInjectedWeb3 = true\n    } catch (e) {\n      console.log(e)\n    }\n\n    return this.usingInjectedWeb3\n  }\n\n  public createSwitchableWeb3() {\n    const web3RequestHandler = {\n      get: (obj: any, prop: string) =>\n        this.usingInjectedWeb3 ? this.injectedWeb3[prop] : this.defaultWeb3[prop]\n    }\n\n    return new Proxy({}, web3RequestHandler)\n  }\n}\n\nexport default new Web3ProviderSwitcher()\n","import React, { createContext, useContext, useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const TokenIdContext = createContext<any>('');\n\n\ninterface ProviderProps {\n  children: any,//React.Component\n  tokenId: number\n}\n\nexport const TokenIdProvider: React.FunctionComponent<ProviderProps> = ({ children, tokenId }) => {\n  return <TokenIdContext.Provider value={tokenId}>\n    {children}\n  </TokenIdContext.Provider>\n};\n\nTokenIdProvider.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport const useTokenId = () => useContext(TokenIdContext);\n\nexport const connectTokenId = (WrappedComponent: any) => {\n  return (props: any) => {\n    const tokenId = useTokenId()\n    const newProps = { ...props, tokenId }\n    return <WrappedComponent {...newProps} />\n  }\n}\n","import { drizzleConnect } from \"drizzle-react\";\nimport React, { Children, Component } from \"react\";\n\n// cost ComponentWithMemo = (update)\nexport default (interval) => {\n  let inThrottle = false\n  return (Component, mapStateToProps) => {\n    const checkThrottle = () => {\n      if (!inThrottle) {\n        inThrottle = true\n        setTimeout(() => inThrottle = false, interval)\n        return true\n      }\n      return false\n    }\n    const MemoComponent = React.memo(props => <Component{...props} />, (prevProps, nextProps) => checkThrottle())\n\n    return drizzleConnect(\n      (props) => <MemoComponent {...props} />,\n      mapStateToProps\n    )\n  }\n}\n\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport moment from \"moment\";\nimport { useTokenId } from \"./TokenIdContext\";\nimport { connectTokenId } from \"./TokenIdContext\";\nimport throttledDrizzelConnect from \"./throttledDrizzelConnect\";\n\nclass ContractData extends Component<{\n  contracts: any, methodArgs: any, method: any, contract: any, toUtf8: any\n  , toAscii: any\n  , toEth: any\n  , toDate: any\n  , hideIndicator: any\n}, { dataKey: any }> {\n\n  static contextTypes = {\n    drizzle: PropTypes.object\n  }\n\n  context: any;\n  utils: any\n  contracts: any\n  constructor(props: any, context: any) {\n    super(props);\n\n    // Fetch initial value from chain and return cache key for reactive updates.\n    var methodArgs = this.props.methodArgs ? this.props.methodArgs : [];\n\n    this.utils = context.drizzle.web3.utils;\n    this.contracts = context.drizzle.contracts;\n\n    const tokenId = props.tokenId\n    this.state = {\n      dataKey: this.contracts[this.props.contract].methods[\n        this.props.method\n      ].cacheCall(tokenId, ...methodArgs),\n    };\n  }\n\n  // Will not fix legacy component\n  // eslint-disable-next-line react/no-deprecated\n  componentWillReceiveProps(nextProps: any) {\n    const { methodArgs, contract, method, tokenId } = nextProps;\n\n    const didContractChange = contract !== nextProps.contract;\n    const didMethodChange = method !== nextProps.method;\n    const didArgsChange =\n      JSON.stringify(methodArgs) !== JSON.stringify(nextProps.methodArgs);\n\n    if (didContractChange || didMethodChange || didArgsChange) {\n      this.setState({\n        dataKey: this.contracts[nextProps.contract].methods[\n          nextProps.method\n        ].cacheCall(tokenId, ...nextProps.methodArgs),\n      });\n    }\n  }\n\n  render() {\n    // Contract is not yet intialized.\n    if (!this.props.contracts[this.props.contract].initialized) {\n      return <span>Initializing...</span>;\n    }\n\n    // If the cache key we received earlier isn't in the store yet; the initial value is still being fetched.\n    if (\n      !(\n        this.state.dataKey in\n        this.props.contracts[this.props.contract][this.props.method]\n      )\n    ) {\n      return <span>Fetching...</span>;\n    }\n\n    // Show a loading spinner for future updates.\n    var pendingSpinner = this.props.contracts[this.props.contract].synced\n      ? \"\"\n      : \"\";\n\n    // Optionally hide loading spinner (EX: ERC20 token symbol).\n    if (this.props.hideIndicator) {\n      pendingSpinner = \"\";\n    }\n\n    var displayData = this.props.contracts[this.props.contract][\n      this.props.method\n    ][this.state.dataKey].value;\n\n    // Optionally convert to UTF8\n    if (this.props.toUtf8) {\n      displayData = this.context.drizzle.web3.utils.hexToUtf8(displayData);\n    }\n\n    // Optionally convert to Ascii\n    if (this.props.toAscii) {\n      displayData = this.context.drizzle.web3.utils.hexToAscii(displayData);\n    }\n\n    // Optionally convert wei to ETH\n    if (this.props.toEth) {\n      displayData = this.utils.fromWei(displayData, 'ether');\n    }\n\n    if (this.props.toDate) {\n      displayData = moment(parseInt(displayData) * 1000).toString();\n    }\n\n    // If return value is an array\n    if (Array.isArray(displayData)) {\n      const displayListItems = displayData.map((datum, index) => {\n        return (\n          <li key={index}>\n            {`${datum}`}\n            {pendingSpinner}\n          </li>\n        );\n      });\n\n      return <ul>{displayListItems}</ul>;\n    }\n\n    // If retun value is an object\n    if (typeof displayData === \"object\") {\n      var i = 0;\n      const displayObjectProps: any[] = [];\n\n      Object.keys(displayData).forEach(key => {\n        if (i !== parseInt(key)) {\n          displayObjectProps.push(\n            <li key={i}>\n              <strong>{key}</strong>\n              {pendingSpinner}\n              <br />\n              {`${displayData[key]}`}\n            </li>,\n          );\n        }\n\n        i++;\n      });\n\n      return <ul>{displayObjectProps}</ul>;\n    }\n\n    return (\n      <span>\n        {`${displayData}`}\n        {pendingSpinner}\n      </span>\n    );\n  }\n}\n\n// ContractData.contextTypes = {\n//   drizzle: PropTypes.object,\n// };\n\n/*\n * Export connected component.\n */\n\nconst mapStateToProps = (state: any) => {\n  return {\n    contracts: state.contracts,\n  };\n};\n\nexport default connectTokenId(throttledDrizzelConnect(1000)(ContractData, mapStateToProps))\n","import React, { createContext, useContext, useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\n\nimport axios from 'axios';\n\nexport const UsdPriceContext = createContext<any>('');\nexport const getEtherUsdPrice = async () => {\n  // fetch exchange rate.\n  // https://api.kraken.com/0/public/Ticker?pair=ETHUSD).result.XETHZUSD.c.0\n  const ETHUSD = await axios.get('https://api.kraken.com/0/public/Ticker?pair=ETHUSD');\n  // todo: return -1 if URI request failed\n  if (ETHUSD.hasOwnProperty('data')) {\n    return parseFloat(ETHUSD.data.result.XETHZUSD.c[0]);\n  } else {\n    return -1;\n  }\n}\n\ninterface ProviderProps {\n  children: any//React.Component\n}\n\nexport const UsdPriceProvider: React.FunctionComponent<ProviderProps> = ({ children }) => {\n  const [etherUsdPrice, setEtherUsdPrice] = useState(-1);\n\n  useEffect(() => {\n    // if the price has never been set, try to set it immediately\n    if (etherUsdPrice < 0) {\n      getEtherUsdPrice().then(setEtherUsdPrice)\n    }\n\n    const timer = setInterval(async () => {\n      const newEtherUsdPrice = await getEtherUsdPrice();\n      setEtherUsdPrice(newEtherUsdPrice)\n    }, 3000);\n    return () => clearInterval(timer);\n  }, [etherUsdPrice]);\n\n  return <UsdPriceContext.Provider value={etherUsdPrice}>\n    {children}\n  </UsdPriceContext.Provider>\n};\n\nUsdPriceProvider.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport const useUsdPrice = () => useContext(UsdPriceContext);\n","import React, { Component, Fragment, useEffect, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport moment from \"moment\"\nimport { Tooltip } from 'rimble-ui'\nimport ContractData from \"./ContractData\";\nimport Countdown from \"./Countdown\"\nimport { useUsdPrice } from \"./USDPriceContext\"\nimport { connectTokenId } from \"./TokenIdContext\";\nimport throttledDrizzelConnect from \"./throttledDrizzelConnect\";\n\ndeclare global {\n  interface Window {\n    ethereum: any;\n    initialImageDetails: any;\n    initialImageDetailsLoaded: any\n    rootCdnUrl: any\n  }\n}\n\nwindow.ethereum = window.ethereum || {}\n\ninterface DisplayProps {\n  combinedCollected: string,\n  vitalikPriceEth: string,\n  foreclosureTime: string,\n}\n\nconst nullTime = {\n  years: 0,\n  days: 0,\n  hours: 0,\n  minutes: 0,\n  seconds: 0,\n  millisec: 0,\n}\n\n// const calculateCountdown = (endDate: string) => {\n//   // let diff = (new Date(endDate)).\n//   let diff = (Date.parse((new Date(endDate)).toUTCString()) - Date.parse((new Date()).toUTCString())) / 1000;\n\n//   // clear countdown when date is reached\n//   if (diff <= 0) return nullTime;\n\n//   const timeLeft = nullTime;\n\n//   // calculate time difference between now and expected date\n//   if (diff >= (365.25 * 86400)) { // 365.25 * 24 * 60 * 60\n//     timeLeft.years = Math.floor(diff / (365.25 * 86400));\n//     diff -= timeLeft.years * 365.25 * 86400;\n//   }\n//   if (diff >= 86400) { // 24 * 60 * 60\n//     timeLeft.days = Math.floor(diff / 86400);\n//     diff -= timeLeft.days * 86400;\n//   }\n//   if (diff >= 3600) { // 60 * 60\n//     timeLeft.hours = Math.floor(diff / 3600);\n//     diff -= timeLeft.hours * 3600;\n//   }\n//   if (diff >= 60) {\n//     timeLeft.minutes = Math.floor(diff / 60);\n//     diff -= timeLeft.minutes * 60;\n//   }\n//   timeLeft.seconds = diff;\n\n//   return timeLeft;\n// }\n\n// Functional component for sake of reactHooks...\nconst DisplayComponent: React.FunctionComponent<DisplayProps> = ({ combinedCollected, vitalikPriceEth: vitalikPriceEth, foreclosureTime }) => {\n\n  // const [countDown, setCountdown] = useState(nullTime);\n  const usdPrice = useUsdPrice()\n  const priceOfGorillaInUsd = parseFloat(vitalikPriceEth) * usdPrice\n  const combinedCollectedUsd = parseFloat(combinedCollected) * usdPrice\n\n  // useEffect(() => {\n  //   const date = calculateCountdown(foreclosureTime);\n  //   setCountdown(date);\n  //   const interval = setInterval(() => {\n  //     if (foreclosureTime !== \"N/A\") {\n\n  //       const date = calculateCountdown(foreclosureTime);\n  //       setCountdown(date);\n  //     }\n  //   }, 1000);\n  //   return () => clearTimeout(interval);\n  // }, [foreclosureTime]);\n\n  // const tooltipContent = () =>\n  //   foreclosureTime !== \"N/A\" ?\n  //     <div className=\"section\">\n  //       <p>The deposit for Vitalik will run out on {foreclosureTime}</p>\n  //       <p>Time until deposit runs out in <Countdown countDown={countDown} /></p>\n  //     </div>\n  //     :\n  //     <div className=\"section\">\n  //       <p>Loading deposit info</p>\n  //     </div>\n\n  let diff = (Date.parse((new Date(parseInt(foreclosureTime) * 1000)).toUTCString()) - Date.parse((new Date()).toUTCString())) / 1000;\n\n  // clear countdown when date is reached\n  const isForeclosed = (diff <= 0);\n  return (\n\n    <div className=\"section image-block-text\">\n      {/* <Tooltip message={tooltipContent()}> */}\n      {isForeclosed ? <React.Fragment>\n        <p>\n          The deposit on this token has run out. Pick it up for free!\n        </p>\n      </React.Fragment>\n        :\n        <React.Fragment>\n          <p>\n            Current Price: <ContractData contract=\"VitalikSteward\" method=\"price\" toEth /> ETH.{priceOfGorillaInUsd > 0 && ` (~ ${priceOfGorillaInUsd.toFixed(2)} USD)`}\n          </p>\n        </React.Fragment>}\n      {/* </Tooltip> */}\n    </div>\n    // <br />\n    // Total Raised: {(parseFloat(combinedCollected) < 0) ? 'LOADING' : parseFloat(combinedCollected).toFixed(7/*7 digits is enough to see the price changing when asset is reasonably priced*/)} ETH.{combinedCollectedUsd > 0 && ` (~ ${combinedCollectedUsd.toFixed(2)} USD)`}\n  )\n}\nclass ActionSection extends Component<{ contracts: any }, {}>  {\n  utils: any\n  contracts: any\n  state: {\n    patronageOwedKey: string\n    totalCollectedKey: string\n    foreclosureTimeKey: string\n    patronageOwed: string\n    combinedCollected: string\n    foreclosureTime: string\n    vitalikPrice: string\n  }\n\n  static contextTypes = {\n    drizzle: PropTypes.object\n  }\n\n  context: any;\n  constructor(props: any, context: any) {\n    super(props, context)\n    this.utils = context.drizzle.web3.utils;\n    this.contracts = context.drizzle.contracts;\n\n    this.getTotalCollected = this.getTotalCollected.bind(this)\n    this.getPatronageOwed = this.getPatronageOwed.bind(this)\n    this.getVitalikPriceEth = this.getVitalikPriceEth.bind(this)\n    const { tokenId } = props\n    this.state = {\n      patronageOwedKey: context.drizzle.contracts.VitalikSteward.methods.patronageOwed.cacheCall(tokenId),\n      foreclosureTimeKey: context.drizzle.contracts.VitalikSteward.methods.foreclosureTime.cacheCall(tokenId),\n      totalCollectedKey: context.drizzle.contracts.VitalikSteward.methods.totalCollected.cacheCall(tokenId),\n      patronageOwed: \"-1\",\n      combinedCollected: \"-1\",\n      foreclosureTime: \"N/A\",\n      vitalikPrice: \"-1\",\n    };\n    this.state = {\n      ...this.state,\n      patronageOwed: this.getPatronageOwed(props),\n      // combinedCollected: this.getCombinedCellected(props),\n      vitalikPrice: this.getVitalikPriceEth(props),\n    };\n  }\n\n  getTotalCollected(props: any) {\n    if (props.contracts['VitalikSteward'].initialized && !!props.contracts['VitalikSteward']['totalCollected'][this.state.totalCollectedKey])\n      return new this.utils.BN(props.contracts['VitalikSteward']['totalCollected'][this.state.totalCollectedKey].value);\n\n    return \"-1\"\n  }\n\n\n  getPatronageOwed(props: any) {\n    if (props.contracts['VitalikSteward'].initialized && !!props.contracts['VitalikSteward']['patronageOwed'][this.state.patronageOwedKey])\n      return new this.utils.BN(props.contracts['VitalikSteward']['patronageOwed'][this.state.patronageOwedKey].value);\n\n    return \"-1\"\n  }\n\n  getVitalikPriceEth(props: any) {\n    if (props.contracts['VitalikSteward'].initialized && !!props.contracts['VitalikSteward']['price']['0x0'])\n      return this.utils.fromWei(new this.utils.BN(props.contracts['VitalikSteward']['price']['0x0'].value), 'ether').toString()\n\n    return \"-1\"\n  }\n  // getCombinedCellected(props: any) {\n  //   const patronageOwed = this.getPatronageOwed(props);\n  //   const totalCollected = this.getTotalCollected(props);\n  //   if (patronageOwed !== \"-1\" && totalCollected !== \"-1\")\n  //     return this.utils.fromWei(totalCollected.add(patronageOwed), 'ether').toString();\n\n  //   return \"-1\"\n  // }\n\n  // async updateCombineCollected(props: any) {\n  //   const patronageOwed = this.getPatronageOwed(props);\n  //   const combinedCollected = this.getCombinedCellected(props)\n\n  //   // This is hacky, but just putting this here for now\n  //   const vitalikPrice = this.getVitalikPriceEth(props);\n\n  //   this.setState({\n  //     patronageOwed,\n  //     combinedCollected,\n  //     vitalikPrice,\n  //   });\n  // }\n  // loadComponentData\n\n  async componentWillReceiveProps(nextProps: any) {\n    if (this.props.contracts['VitalikSteward']['foreclosureTime'][this.state.foreclosureTimeKey] !== nextProps.contracts['VitalikSteward']['foreclosureTime'][this.state.foreclosureTimeKey]) {\n      const foreclosureTime = nextProps.contracts['VitalikSteward']['foreclosureTime'][this.state.foreclosureTimeKey].value\n      this.setState({ foreclosureTime });\n    }\n\n    // if (this.state.patronageOwedKey in this.props.contracts['VitalikSteward']['patronageOwed']\n    //   && this.state.patronageOwedKey in nextProps.contracts['VitalikSteward']['patronageOwed']\n    //   && this.state.totalCollectedKey in this.props.contracts['VitalikSteward']['totalCollected']\n    //   && this.state.totalCollectedKey in nextProps.contracts['VitalikSteward']['totalCollected']) {\n    //   const ownedNow = this.getPatronageOwed(this.props)\n    //   const ownedNext = this.getPatronageOwed(nextProps)\n    //   if (ownedNow === \"-1\" || ownedNext === \"-1\" || !ownedNow.eq(ownedNext) || this.state.combinedCollected === \"-1\") {\n    //     this.updateCombineCollected(nextProps);\n    //   }\n    // }\n  }\n\n  render() {\n\n    const { combinedCollected, vitalikPrice, foreclosureTime } = this.state\n\n\n    return (\n      <DisplayComponent {...{ combinedCollected, vitalikPriceEth: vitalikPrice, foreclosureTime }} />\n    )\n  }\n}\n\n/*\n * Export connected component.\n */\n\nconst mapStateToProps = (state: any) => {\n  return {\n    contracts: state.contracts,\n  };\n};\n\nexport default connectTokenId(throttledDrizzelConnect(1000)(ActionSection, mapStateToProps))\n\n","import React, { Children, Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport throttledDrizzelConnect from \"./throttledDrizzelConnect\";\n\n/*\n * Create component.\n */\n\n// const throttleCreator = (limit, numItems) => {\n//   let inThrottle = Array(numItems)\n//   return function (i, time) {\n//     if (!inThrottle) {\n//       inThrottle[i] = true\n//       setTimeout(() => inThrottle[i] = false, time)\n//       return true\n//     }\n//     return false\n//   }\n// }\n// const throttle = throttleCreator(3)\n\nconst OfflineContainer = (props) => {\n  if (props.drizzleStatus.initialized) {\n    return Children.only(props.children);\n  }\n\n  if (!!props.alternateLoader) {\n    return <props.alternateLoader />\n  }\n\n  if (props.web3.status === \"\") {\n    return (\n      <div className=\"section\">\n        This application is offline. Please ensure you have an Ethereum/web3 enabled browser.\n        </div>\n    )\n  }\n\n\n  return (\n    <main className=\"container loading-screen\">\n      <div className=\"pure-g\">\n        <div className=\"pure-u-1-1\">\n          <h1>⚙️</h1>\n          <p>Loading dapp...</p>\n        </div>\n      </div>\n    </main>\n  );\n}\n\n/*\n * Export connected component.\n */\n\nconst mapStateToProps = (state) => {\n  return {\n    accounts: state.accounts,\n    drizzleStatus: state.drizzleStatus,\n    web3: state.web3,\n  };\n};\n\nexport default throttledDrizzelConnect(1000)(OfflineContainer, mapStateToProps);\n","import PropTypes from 'prop-types';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport React, { Component, Fragment } from 'react';\nimport {\n  Button,\n  Modal,\n  Card,\n  Box,\n  Heading,\n  Text,\n  Flex,\n  Loader,\n  Input\n} from 'rimble-ui';\nimport web3ProvideSwitcher from '../web3ProvideSwitcher';\nimport TokenOverview from './TokenOverview';\nimport { connectTokenId } from './TokenIdContext';\nimport throttledDrizzelConnect from './throttledDrizzelConnect';\n\ninterface state {\n  contractFunctions: any;\n  isOpen: boolean;\n  connectedToInjectedWeb3: boolean;\n  currentTxIndex: number;\n  priceKey: any;\n  isForeclosed: boolean;\n}\n\nclass BuyModal extends Component<any, any> {\n  contracts: any;\n  utils: any;\n  inputs: any;\n  state: state;\n\n  static contextTypes = {\n    drizzle: PropTypes.object\n  };\n\n  context: any;\n\n  constructor(props: any, context: any) {\n    super(props);\n\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n\n    this.contracts = context.drizzle.contracts;\n    this.utils = context.drizzle.web3.utils;\n\n    // Get the contract ABI, if it is undefined return an empty array\n    const abi = !!this.contracts.VitalikSteward\n      ? this.contracts.VitalikSteward.abi\n      : [];\n\n    this.inputs = [];\n    let contractFunctions: any = {};\n\n    // Iterate over abi for correct function.\n    for (let i = 0; i < abi.length; i++) {\n      if (abi[i].name === 'buy') {\n        this.inputs = abi[i].inputs;\n\n        for (let j = 0; j < this.inputs.length; j++) {\n          contractFunctions[this.inputs[j].name] = '';\n        }\n\n        break;\n      }\n    }\n\n    this.contracts.VitalikSteward.methods.foreclosed(props.tokenId).call().then(\n      (foreclosed: boolean) => this.setState({ ...this.state, isForeclosed: foreclosed })\n    )\n\n    this.state = {\n      contractFunctions,\n      isOpen: false,\n      connectedToInjectedWeb3: false,\n      currentTxIndex: -1,\n      priceKey: context.drizzle.contracts.VitalikSteward.methods.price.cacheCall(props.tokenId),\n      isForeclosed: false\n    };\n  }\n\n  handleSubmit(event: any) {\n    event.preventDefault();\n    let args: any = {};\n\n    // todo: if foreclosed, price should default to zero.\n    if (this.state.contractFunctions.value) {\n      const priceKey = this.props.contracts.VitalikSteward['price'][this.state.priceKey]\n      const price = !!priceKey ? (!!priceKey.value ? priceKey.value : 0) : 0\n      const artworkPrice = new this.utils.BN(\n        price\n      );\n      args.value = new this.utils.BN(\n        this.utils.toWei(this.state.contractFunctions.value, 'ether')\n      ).add(\n        this.state.isForeclosed ?\n          new this.utils.BN(0) :\n          artworkPrice);\n    }\n\n    const currentTxIndex = args\n      ? this.contracts.VitalikSteward.methods['buy'].cacheSend(\n        this.props.tokenId,\n        this.utils.toWei(\n          this.state.contractFunctions._newPrice,\n          'ether'\n        ),\n        args\n      )\n      : this.contracts.VitalikSteward.methods['buy'].cacheSend(\n        this.props.tokenId,\n        this.utils.toWei(\n          this.state.contractFunctions._newPrice,\n          'ether'\n        ),\n      );\n\n    this.setState((state: any, props: any) => ({\n      ...state,\n      currentTxIndex\n    }));\n  }\n\n  componentWillReceiveProps(nextProps: any) {\n    const { transactions, transactionStack } = this.props;\n\n    const didTransactionsChange = transactions !== nextProps.transactions;\n    const didTransactionStackChange =\n      transactionStack !== nextProps.transactionStack;\n  }\n\n  handleInputChange(event: any) {\n    this.setState({\n      ...this.state,\n      contractFunctions: {\n        ...this.state.contractFunctions,\n        [event.target.name]: event.target.value\n      }\n    });\n  }\n\n  translateType(type: any) {\n    switch (true) {\n      case /^uint/.test(type):\n        return 'number';\n      case /^string/.test(type) || /^bytes/.test(type):\n        return 'text';\n      case /^bool/.test(type):\n        return 'checkbox';\n      default:\n        return 'text';\n    }\n  }\n\n  closeModal = (e: any) => {\n    e.preventDefault();\n    this.setState((state: any, props: any) => ({\n      ...state,\n      isOpen: false,\n      currentTxIndex: -1\n    }));\n  };\n\n  openModal = async (e: any) => {\n    e.preventDefault();\n    this.setState((state: any, props: any) => ({\n      ...state,\n      isOpen: true,\n      currentTxIndex: -1\n    }));\n\n    const connectedToInjectedWeb3 = await web3ProvideSwitcher.switchToInjectedWeb3();\n\n    this.setState((state: any, props: any) => ({\n      ...state,\n      connectedToInjectedWeb3\n    }));\n  };\n\n  render() {\n    const valueLabel = 'Your Initial Deposit';\n    const { transactions, transactionStack } = this.props;\n    const { currentTxIndex } = this.state;\n    let transactionStatus = 'Submitting transaction to the Ethereum Network.';\n    let txHash = '';\n    let txComplete = false;\n    if (!!transactionStack[this.state.currentTxIndex]) {\n      const tempTxHash = transactionStack[this.state.currentTxIndex];\n      if (!!transactions[tempTxHash]) {\n        txHash = transactionStack[this.state.currentTxIndex];\n        switch (transactions[txHash].status) {\n          case 'pending':\n            transactionStatus =\n              'Transaction being processed by the Ethereum Network.';\n            break;\n          case 'success':\n            txComplete = true;\n            transactionStatus = 'Transaction is complete.';\n            break;\n        }\n      }\n    }\n\n    const transactionProcessing = currentTxIndex !== -1;\n    return (\n      <React.Fragment>\n        <Button mainColor='#7A7A7A' size=\"small\" onClick={this.openModal}>{this.state.isForeclosed ? \"Claim\" : \"Buy\"}</Button>\n\n        <Modal isOpen={this.state.isOpen}>\n          <Card width={'420px'} p={0}>\n            <Button.Text\n              icononly\n              icon={'Close'}\n              color={'moon-gray'}\n              position={'absolute'}\n              top={0}\n              right={0}\n              mt={3}\n              mr={3}\n              onClick={this.closeModal}\n            />\n            {(!!this.props.accounts[0] || this.state.connectedToInjectedWeb3) ? (\n              <Box p={4} mb={3} i>\n                {transactionProcessing ? (\n                  <Fragment>\n                    <Heading.h3>Processing Transaction</Heading.h3>\n                    <p>{transactionStatus}</p>\n                    {!!txHash && (\n                      <a\n                        href={'https://etherscan.io/tx/' + txHash}\n                        target='_blank'\n                      >\n                        View transaction on Ethersan\n                      </a>\n                    )}\n                    {!txComplete && <Loader color='red' size='80px' />}\n                  </Fragment>\n                ) : (\n                    <Fragment>\n                      <Heading.h3>Purchase</Heading.h3>\n                      <Text>Enter the desired values for the transaction.</Text>\n                      <form\n                        className='pure-form pure-form-stacked'\n                        onSubmit={this.handleSubmit}\n                      >\n                        <Input\n                          key='_newPrice'\n                          type='number'\n                          name='_newPrice'\n                          value={this.state.contractFunctions['_newPrice']}\n                          placeholder={'Your Initial Sale Price'}\n                          onChange={this.handleInputChange}\n                          style={{ width: '100%' }}\n                          startAdornment={\n                            <InputAdornment position='start'>ETH</InputAdornment>\n                          }\n                        />\n                        <Fragment>\n                          <br />\n                          <Input\n                            key={valueLabel}\n                            type='number'\n                            name='value'\n                            value={this.state.contractFunctions[valueLabel]}\n                            placeholder={valueLabel}\n                            onChange={this.handleInputChange}\n                            style={{ width: '100%' }}\n                            startAdornment={\n                              <InputAdornment position='start'>\n                                ETH\n                            </InputAdornment>\n                            }\n                          />\n                          <br />\n                          <br />\n                        </Fragment>\n                      </form>\n                      <TokenOverview />\n                    </Fragment>\n                  )}\n              </Box>\n            ) : (\n                <Box p={4} mb={3}>\n                  <Heading.h3>NOTICE</Heading.h3>\n                  <Text>\n                    Unable to connect to metamask, so unable to sign transactions.\n                </Text>\n                </Box>)\n            }\n            {(!transactionProcessing) && <Flex px={4} py={3} borderTop={1} borderColor={'#E8E8E8'} justifyContent={'flex-end'}>\n              {/* <Button.Outline>Cancel</Button.Outline> In the future this could be for resetting the values or something*/}\n              <Button\n                mainColor='#7A7A7A' size=\"small\"\n                ml={3}\n                onClick={this.handleSubmit}\n              >Purchase this ad space</Button>\n            </Flex>}\n          </Card>\n        </Modal>\n      </React.Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = (state: any) => {\n  return {\n    contracts: state.contracts,\n    transactions: state.transactions,\n    transactionStack: state.transactionStack,\n    accounts: state.accounts\n  };\n};\n\nexport default connectTokenId(throttledDrizzelConnect(1000)(BuyModal, mapStateToProps))\n","import PropTypes from \"prop-types\";\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport React, { Component, Fragment } from \"react\";\nimport { Button, Modal, Card, Box, Heading, Text, Flex, Loader, Input, Radio } from 'rimble-ui'\nimport web3ProvideSwitcher from \"../web3ProvideSwitcher\"\nimport TokenOverview from \"./TokenOverview\"\nimport moment from 'moment'\nimport { useTokenId, connectTokenId } from \"./TokenIdContext\";\nimport UploadImage from './UploadImage'\nimport throttledDrizzelConnect from \"./throttledDrizzelConnect\";\n\nenum ModalState {\n  Deposit,\n  Price,\n  Closed,\n  UploadImage,\n  updateWebsiteUrl\n}\n\ninterface state {\n  contractFunctions: any,\n  modalState: ModalState,\n  connectedToInjectedWeb3: boolean,\n  currentTxIndex: number,\n  depositState: boolean,\n  depositAvailable: any,\n  balance: number,\n  updateUrl: string\n}\n\nclass BuyModal extends Component<any, any> {\n  contracts: any\n  utils: any\n  inputs: any\n  state: state\n  drizzle: any\n\n  // Note, context is used to get the full drizzle object. This is slightly hacky, we should be able to do this with the drizzleConnect component only.\n  static contextTypes = {\n    drizzle: PropTypes.object\n  }\n\n  context: any;\n\n  constructor(props: any, context: any) {\n    super(props);\n\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n\n    this.contracts = context.drizzle.contracts;\n    this.utils = context.drizzle.web3.utils;\n    this.drizzle = context.drizzle\n\n    // Get the contract ABI, if it is undefined return an empty array\n    const abi = (!!this.contracts.VitalikSteward) ? this.contracts.VitalikSteward.abi : [];\n\n    this.inputs = [];\n    let contractFunctions: any = {};\n\n    this.state = {\n      contractFunctions,\n      modalState: ModalState.Closed,\n      connectedToInjectedWeb3: false,\n      currentTxIndex: -1,\n      depositState: true,\n      depositAvailable: '',\n      updateUrl: '',\n      balance: -1,\n    };\n  }\n\n\n  updateImageHashOnSmartContract = (imageHash: string) => {\n    let currentTxIndex: number\n    if (this.state.modalState === ModalState.UploadImage) {\n      currentTxIndex = this.contracts.VitalikSteward.methods[\n        'changeImage'\n      ].cacheSend(this.props.tokenId, imageHash)\n    }\n\n    this.setState((state: any, props: any) => ({\n      ...state,\n      currentTxIndex\n    }))\n  }\n\n  handleSubmitOfWebsite = (event: any) => {\n    event.preventDefault();\n    let inputValue = this.state.updateUrl\n    let currentTxIndex: any\n    // if(this.state.modalState === ModalState.updateWebsiteUrl){\n    currentTxIndex = this.contracts.VitalikSteward.methods[\n      'changeUrl'\n    ].cacheSend(this.props.tokenId, inputValue)\n    // }\n    this.setState((state: any, props: any) => ({\n      ...state,\n      currentTxIndex\n    }))\n  }\n\n  handleSubmit(event: any) {\n    event.preventDefault();\n    let inputValueRawMaybe = this.state.contractFunctions['newSettingValue'] // all number fields are ETH  fields.\n    let inputValueRaw = !!inputValueRawMaybe ? inputValueRawMaybe : 0\n    let inputValue = this.utils.toWei(inputValueRaw, 'ether'); // all number fields are ETH  fields.\n    let currentTxIndex: number\n    if (this.state.modalState === ModalState.Deposit) {\n      const contractFunction = this.state.depositState ? 'depositWei' : 'withdrawDeposit'\n      currentTxIndex = this.contracts.VitalikSteward.methods[\n        contractFunction\n      ].cacheSend(this.props.tokenId, { value: inputValue })\n    } else if (this.state.modalState === ModalState.Price) {\n      currentTxIndex = this.contracts.VitalikSteward.methods[\n        'changePrice'\n      ].cacheSend(this.props.tokenId, inputValue)\n    }\n    else if (this.state.modalState === ModalState.updateWebsiteUrl) {\n      currentTxIndex = this.contracts.VitalikSteward.methods[\n        'changeUrl'\n      ].cacheSend(this.props.tokenId, inputValue)\n    }\n    // else if(this.state.modalState === ModalState.UploadImage){\n    //   currentTxIndex = this.contracts.VitalikSteward.methods[\n    //     'changeImage'\n    //   ].cacheSend(this.props.tokenId, inputValue)\n    // }\n\n    this.setState((state: any, props: any) => ({\n      ...state,\n      currentTxIndex\n    }))\n  }\n\n  componentWillReceiveProps(nextProps: any) {\n    const { transactions, transactionStack, tokenId } = this.props;\n\n    // const didTransactionsChange = transactions !== nextProps.transactions;\n    // const didTransactionStackChange = transactionStack !== nextProps.transactionStack;\n\n    const depositKey = this.context.drizzle.contracts.VitalikSteward.methods.depositAbleToWithdraw.cacheCall(tokenId)\n    const depositObj = nextProps.contracts.VitalikSteward.depositAbleToWithdraw[depositKey]\n\n    if (!!depositObj && !!depositObj.value) {\n      const depositAvailable = this.utils.fromWei(depositObj.value, 'ether')\n      if (this.state.depositAvailable !== depositAvailable) {\n        this.setState({\n          ...this.state,\n          depositAvailable\n        })\n      }\n    }\n\n    if (!!depositObj && !!depositObj.value) {\n      const depositAvailable = this.utils.fromWei(depositObj.value, 'ether')\n      if (this.state.depositAvailable !== depositAvailable) {\n        this.setState({\n          ...this.state,\n          depositAvailable\n        })\n      }\n    }\n    if (!!this.props.accounts && !!this.props.accounts[0]) {\n      this.drizzle.web3.eth.getBalance(this.props.accounts[0]).then((balance: number) => {\n        this.setState({\n          ...this.state,\n          balance\n        })\n      })\n    }\n  }\n\n  handleWebsiteInputChange = (event: any) => {\n    this.setState({\n      ...this.state,\n      updateUrl: event.target.value\n    })\n  }\n\n  handleInputChange(event: any) {\n    this.setState({\n      ...this.state,\n      contractFunctions: {\n        ...this.state.contractFunctions, [event.target.name]: event.target.value\n      }\n    })\n  }\n\n\n\n  translateType(type: any) {\n    switch (true) {\n      case /^uint/.test(type):\n        return \"number\";\n      case /^string/.test(type) || /^bytes/.test(type):\n        return \"text\";\n      case /^bool/.test(type):\n        return \"checkbox\";\n      default:\n        return \"text\";\n    }\n  }\n\n  closeModal = (e: any) => {\n    e.preventDefault()\n    this.setState((state: any, props: any) => ({\n      ...state,\n      modalState: ModalState.Closed,\n      currentTxIndex: -1,\n    }))\n  }\n\n  setDepositWithdrawToggle = (depositState: boolean) => {\n    this.setState((state: any, props: any) => ({\n      ...state,\n      depositState,\n    }))\n  }\n\n  openModal = async (modalState: ModalState) => {\n    this.setState((state: any, props: any) => ({\n      ...state,\n      modalState,\n      currentTxIndex: -1,\n    }))\n\n    const connectedToInjectedWeb3 = await web3ProvideSwitcher.switchToInjectedWeb3()\n\n    this.setState((state: any, props: any) => ({\n      ...state,\n      connectedToInjectedWeb3,\n    }))\n  }\n\n  render() {\n    // const valueLabel = \"Your Initial Deposit\";\n    const { transactions, transactionStack } = this.props\n    const { currentTxIndex } = this.state\n    let transactionStatus = 'Submitting transaction to the Ethereum Network.'\n    let txHash = ''\n    let txComplete = false\n    if (!!transactionStack[this.state.currentTxIndex]) {\n      const tempTxHash = transactionStack[this.state.currentTxIndex]\n      if (!!transactions[tempTxHash]) {\n        txHash = transactionStack[this.state.currentTxIndex]\n        switch (transactions[txHash].status) {\n          case 'pending':\n            transactionStatus = 'Transaction being processed by the Ethereum Network.'\n            break\n          case 'success':\n            txComplete = true\n            transactionStatus = 'Transaction is complete.'\n            break\n        }\n      }\n    }\n\n    const transactionProcessing = currentTxIndex !== -1\n\n    return (\n      <React.Fragment>\n        <Button style={{ width: '100%' }} mainColor='#7A7A7A' size=\"small\" onClick={() => this.openModal(ModalState.Price)} > Update Price</Button>\n        &ensp;\n        <Button style={{ width: '100%' }} mainColor='#7A7A7A' size=\"small\" onClick={() => this.openModal(ModalState.Deposit)} > Add/Remove Deposit</Button>\n        &ensp;\n        <Button style={{ width: '100%' }} mainColor='#7A7A7A' size=\"small\" onClick={() => this.openModal(ModalState.UploadImage)} > Upload Image</Button>\n        &ensp;\n        <Button style={{ width: '100%' }} mainColor='#7A7A7A' size=\"small\" onClick={() => this.openModal(ModalState.updateWebsiteUrl)} > Update Website</Button>\n        <div style={{ position: 'absolute', top: '1000' }}>\n          <Modal isOpen={this.state.modalState === ModalState.Price}>\n            <Card width={'420px'} p={0}>\n              <Button.Text\n                icononly\n                icon={'Close'}\n                color={'moon-gray'}\n                position={'absolute'}\n                top={0}\n                right={0}\n                mt={3}\n                mr={3}\n                onClick={this.closeModal}\n              />\n              {(!!this.props.accounts[0] || this.state.connectedToInjectedWeb3) ?\n\n                <Box p={4} mb={3}>{\n                  transactionProcessing ?\n                    <Fragment>\n                      <Heading.h3>Processing Transaction</Heading.h3>\n                      <p>{transactionStatus}</p>\n                      {!!txHash && <a href={'https://etherscan.io/tx/' + txHash} target=\"_blank\">View transaction on Ethersan</a>}\n                      {!txComplete && <Loader color=\"red\" size=\"80px\" />}\n                    </Fragment>\n                    :\n                    <Fragment>\n                      <Heading.h3>Price</Heading.h3>\n                      <Text>\n                        How much would you like to receive from selling Vitalik?\n                    </Text>\n                      <form className=\"pure-form pure-form-stacked\" onSubmit={this.handleSubmit}>\n                        <Input\n                          key='newSettingValue'\n                          type='number'\n                          name='newSettingValue'\n                          value={this.state.contractFunctions['newSettingValue'] || 0}\n                          placeholder={`Price`}\n                          onChange={this.handleInputChange}\n                          style={{ width: '100%' }}\n                          startAdornment={<InputAdornment position=\"start\">ETH</InputAdornment>}\n                        />\n                        <br />\n                      </form>\n                      <TokenOverview />\n                    </Fragment>}\n                </Box>\n                :\n                <Box p={4} mb={3}>\n                  <Heading.h3>NOTICE</Heading.h3>\n                  <Text>\n                    Unable to connect to metamask, so unable to sign transactions.\n                </Text>\n                </Box>\n              }\n              {(!transactionProcessing) && <Flex px={4} py={3} borderTop={1} borderColor={'#E8E8E8'} justifyContent={'flex-end'}>\n                {/* <Button.Outline>Cancel</Button.Outline> In the future this could be for resetting the values or something*/}\n                <Button\n                  mainColor='#7A7A7A' size=\"small\"\n                  ml={3}\n                  onClick={this.handleSubmit}\n                >Update</Button>\n              </Flex>}\n            </Card>\n          </Modal>\n        </div>\n        <Modal isOpen={this.state.modalState === ModalState.Deposit}>\n          <Card width={'420px'} p={0}>\n            <Button.Text\n              icononly\n              icon={'Close'}\n              color={'moon-gray'}\n              position={'absolute'}\n              top={0}\n              right={0}\n              mt={3}\n              mr={3}\n              onClick={this.closeModal}\n            />\n            {(!!this.props.accounts[0] || this.state.connectedToInjectedWeb3) ?\n\n              <Box p={4} mb={3}>{\n                transactionProcessing ?\n                  <Fragment>\n                    <Heading.h3>Processing Transaction</Heading.h3>\n                    <p>{transactionStatus}</p>\n                    {!!txHash && <a href={'https://etherscan.io/tx/' + txHash} target=\"_blank\">View transaction on Ethersan</a>}\n                    {!txComplete && <Loader color=\"red\" size=\"80px\" />}\n                  </Fragment>\n                  :\n                  <Fragment>\n                    <Heading.h3>Deposit</Heading.h3>\n                    <Text>\n                      How do you want to change your deposit?\n                    </Text>\n                    <Radio checked={this.state.depositState} onChange={() => this.setDepositWithdrawToggle(true)} label=\"Deposit\" my={2} />\n                    <Radio checked={!this.state.depositState} onChange={() => this.setDepositWithdrawToggle(false)} label=\"Withdrawl\" my={2} />\n                    <form className=\"pure-form pure-form-stacked\" onSubmit={this.handleSubmit}>\n                      <Input\n                        key='newSettingValue'\n                        type='number'\n                        name='newSettingValue'\n                        value={this.state.contractFunctions['newSettingValue'] || 0}\n                        placeholder={`Amount to ${this.state.depositState ? 'add' : 'remove'}`}\n                        onChange={this.handleInputChange}\n                        style={{ width: '100%' }}\n                        startAdornment={<InputAdornment position=\"start\">ETH</InputAdornment>}\n                      />\n                      <br />\n                    </form>\n                    <TokenOverview />\n                  </Fragment>}\n              </Box>\n              :\n              <Box p={4} mb={3}>\n                <Heading.h3>NOTICE</Heading.h3>\n                <Text>\n                  Unable to connect to metamask, so unable to sign transactions.\n                </Text>\n              </Box>\n            }\n            {(!transactionProcessing) && <Flex px={4} py={3} borderTop={1} borderColor={'#E8E8E8'} justifyContent={'flex-end'}>\n              {/* <Button.Outline>Cancel</Button.Outline> In the future this could be for resetting the values or something*/}\n              <Button\n                mainColor='#7A7A7A' size=\"small\"\n                ml={3}\n                onClick={this.handleSubmit}\n              >{this.state.depositState ? 'Add' : 'Withdraw'}</Button>\n            </Flex>}\n          </Card>\n        </Modal>\n        <Modal isOpen={this.state.modalState === ModalState.UploadImage}>\n          <Card width={'420px'} p={0}>\n            <Button.Text\n              icononly\n              icon={'Close'}\n              color={'moon-gray'}\n              position={'absolute'}\n              top={0}\n              right={0}\n              mt={3}\n              mr={3}\n              onClick={this.closeModal}\n            />\n            {(!!this.props.accounts[0] || this.state.connectedToInjectedWeb3) ?\n\n              <Box p={4} mb={3}>{\n                // transactionProcessing ?\n                //   <Fragment>\n                //     <Heading.h3>Processing Transaction</Heading.h3>\n                //     <p>{transactionStatus}</p>\n                //     {!!txHash && <a href={'https://etherscan.io/tx/' + txHash} target=\"_blank\">View transaction on Ethersan</a>}\n                //     {!txComplete && <Loader color=\"red\" size=\"80px\" />}\n                //   </Fragment>\n                //   :\n                <Fragment>\n                  <form className=\"pure-form pure-form-stacked\">\n                    <UploadImage updateImageHashOnSmartContract={this.updateImageHashOnSmartContract} />\n                    <br />\n                  </form>\n                  <TokenOverview />\n                </Fragment>\n              }\n              </Box>\n              :\n              <Box p={4} mb={3}>\n                <Heading.h3>NOTICE</Heading.h3>\n                <Text>\n                  Unable to connect to metamask, so unable to sign transactions.\n                </Text>\n              </Box>\n            }\n          </Card>\n        </Modal>\n        <Modal isOpen={this.state.modalState === ModalState.updateWebsiteUrl}>\n          <Card width={'420px'} p={0}>\n            <Button.Text\n              icononly\n              icon={'Close'}\n              color={'moon-gray'}\n              position={'absolute'}\n              top={0}\n              right={0}\n              mt={3}\n              mr={3}\n              onClick={this.closeModal}\n            />\n            {(!!this.props.accounts[0] || this.state.connectedToInjectedWeb3) ?\n\n              <Box p={4} mb={3}>{\n                transactionProcessing ?\n                  <Fragment>\n                    <Heading.h3>Processing Transaction</Heading.h3>\n                    <p>{transactionStatus}</p>\n                    {!!txHash && <a href={'https://etherscan.io/tx/' + txHash} target=\"_blank\">View transaction on Ethersan</a>}\n                    {!txComplete && <Loader color=\"red\" size=\"80px\" />}\n                  </Fragment>\n                  :\n                  <Fragment>\n                    <Heading.h3>Update website url</Heading.h3>\n                    <Text>\n                      Don't forget to add http or https at the beginning\n                    </Text>\n                    <form className=\"pure-form pure-form-stacked\" onSubmit={this.handleSubmitOfWebsite}>\n                      <Input\n                        key='updateUrl'\n                        type='text'\n                        name='updateUrl'\n                        value={this.state.updateUrl || ''}\n                        // value={this.state.contractFunctions['newSettingValue'] || ''}\n                        // placeholder={`Amount to ${this.state.depositState ? 'add' : 'remove'}`}\n                        onChange={this.handleWebsiteInputChange}\n                        style={{ width: '100%' }}\n                      // startAdornment={<InputAdornment position=\"start\">ETH</InputAdornment>}\n                      />\n                      <br />\n                    </form>\n                    <TokenOverview />\n                  </Fragment>}\n              </Box>\n              :\n              <Box p={4} mb={3}>\n                <Heading.h3>NOTICE</Heading.h3>\n                <Text>\n                  Unable to connect to metamask, so unable to sign transactions.\n                </Text>\n              </Box>\n            }\n            {(!transactionProcessing) && <Flex px={4} py={3} borderTop={1} borderColor={'#E8E8E8'} justifyContent={'flex-end'}>\n              {/* <Button.Outline>Cancel</Button.Outline> In the future this could be for resetting the values or something*/}\n              <Button\n                mainColor='#7A7A7A' size=\"small\"\n                ml={3}\n                onClick={this.handleSubmitOfWebsite}\n              >Update Website Url</Button>\n            </Flex>}\n          </Card>\n        </Modal>\n      </React.Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = (state: any) => {\n  return {\n    contracts: state.contracts,\n    transactions: state.transactions,\n    transactionStack: state.transactionStack,\n    accounts: state.accounts,\n  }\n}\n\nexport default connectTokenId(throttledDrizzelConnect(1000)(BuyModal, mapStateToProps))\n","export const add = (data, name, queryParams) => {\n  const formData = new FormData()\n  formData.append('data0', data, name)\n\n  return fetch('https://ipfs.infura.io:5001/api/v0/add' + queryParams, {\n    method: 'POST',\n    body: formData\n  })\n    .then(r => r.json())\n    .then(data => data)\n}\n\nexport const pin = (ipfsHash) => fetch(\n  'https://ipfs.infura.io:5001/api/v0/pin/add?arg=/ipfs/' + ipfsHash\n)\n  .then(r => r.json())\n  .then(data => data)\n\nexport const cat = (ipfsHash) => fetch(\n  'https://ipfs.infura.io:5001/api/v0/cat?arg=' + ipfsHash\n)\n  .then(r => r.text())\n  .then(data => data)\n\n","import React, { useState, useRef } from 'react';\nimport { Buffer } from 'ipfs'\nimport { ToastMessage, Progress } from 'rimble-ui'\nimport { Heading, Text, } from 'rimble-ui'\nimport { add, pin } from '../lib/ipfs';\n\nconst UploadProgress = ({ image, uploadProgress: { progress, done, pinned } }) => {\n  const progPercent = (progress / image.ipfsDagSize) * 100\n  return <div>\n    {done ?\n      pinned ?\n        <React.Fragment>\n          <h1>Image is pinned to IPFS</h1>\n          <p>When the Ethereum transaction goes through your image should appear in its spot.</p>\n        </React.Fragment>\n        :\n        <React.Fragment>\n          <h1>Uploaded</h1>\n          <p>The data is on IPFS, but we are currently 'pinning' the data to make it last forever.</p>\n          <p>In the meantime you can add the IPFS hash to the smart contract.</p>\n        </React.Fragment>\n      :\n      <div>\n        {progPercent < 98 /*98 is a random number it must jus be quite high so this condition only triggers when waiting for ipfs at the end */ ?\n          <div>\n            <ToastMessage.Processing my={0} message={<div>\n              <Progress value={progPercent} />\n              <p>Uploading to IPFS</p>\n            </div>} />\n          </div>\n          :\n          <div>\n            <ToastMessage.Processing my={0} message={\"Verifying upload on IPFS\"} />\n            <p>Please be patient, decentralisation is still a bit slow unfortunately.</p>\n          </div>\n        }\n      </div>\n    }\n  </div>\n}\nconst UploadImage = ({ updateImageHashOnSmartContract }) => {\n\n  const [currentImage, setCurrentImage] = useState({ data: null, name: null, size: 0, ipfsDagSize: 0 })\n  const progressRef = useRef({ progress: 0, done: false })\n\n  const handleChangeImage = (evt) => {\n    var reader = new FileReader();\n    var file = evt.target.files[0];\n    const size = file.size\n    const name = file.name\n    const ipfsApproxDagSize = size * 1.335 // NOTE: This is a rough, and slight over estimate, will need to be calculated to be precise.\n\n\n    reader.onload = async (upload) => {\n      const data = upload.target.result\n      setCurrentImage({ data, size, ipfsDagSize: ipfsApproxDagSize })\n      // Set the progress to 100% for now since the code for the progress updates isn't working nicely.\n      //    See the 'NOTE' a few lines down. - When that is added, this line can be removed\n      progressRef.current = { progress: ipfsApproxDagSize, done: false }\n\n      // NOTE: this code gets the hash of the data without any network activity\n      // const multihashing = require('multihashing-async')\n      // const digest = await multihashing.digest(buf, 'sha1')\n      // const dataHash = await new Promise(\n      //   (resolve, reject) => multihashing(\n      //     Buffer.from(data),\n      //     'sha1',\n      //     (err, result) =>\n      //       resolve(\n      //         result.toString('hex')\n      //       )\n      //   )\n      // )\n      // NOTE: this method isn't supported by infura, but it would be useful to see if the file already exists on IPFS\n      // const getNumberOfProviders = await window.ipfsNode.dht.findProvs(dataHash, { timeout: 1000, maxNumProviders: 2 })\n\n      const result = await add(new Blob(Buffer.from(data)), name, '?pin=false')\n      // const result = await window.ipfsNode.add(\n      //   Buffer.from(data),\n      //   {\n      //     // // NOTE: this was removed because it was giving problems with infura (it would hang)\n      //     // progress: progress =>\n      //     //   progressRef.current = { progress, done: false },\n      //     pin: false, // Note: if all were good in the world this would be true, problem is that this is extremely slow and not user friendly!\n      //   },\n      // )\n      const ipfsHash = result.Hash\n      progressRef.current = { progress: ipfsApproxDagSize, done: true, ipfsHash, pinned: false }\n      updateImageHashOnSmartContract(ipfsHash)\n      // Try to pin the hash in the background!\n      const pinResult = await pin(ipfsHash)\n      progressRef.current = { progress: ipfsApproxDagSize, done: true, ipfsHash, pinned: true }\n    };\n    reader.readAsDataURL(file);\n  }\n\n  return (\n    <div>\n      <Heading.h3>Upload Image</Heading.h3>\n\n      {(!!currentImage.data) ?\n        <UploadProgress image={currentImage} uploadProgress={progressRef.current}></UploadProgress>\n        :\n        <React.Fragment>\n          <Text>\n            We recommend an optimal image dimesions of 300 x 300 pixels\n          </Text>\n          <input\n            type=\"file\" name=\"file\"\n            className=\"upload-file\"\n            id=\"file\"\n            onChange={handleChangeImage}\n            encType=\"multipart/form-data\"\n            required\n          />\n        </React.Fragment>\n      }\n    </div>\n  )\n}\n\nexport default UploadImage\n","import React, { Component, Fragment, useRef, useEffect } from 'react';\nimport TokenOverview from './TokenOverview';\nimport OfflineContainer from './Offline';\nimport BuyModal from './BuyModal';\nimport UpdateModal from './UpdateModal';\nimport PropTypes from 'prop-types';\nimport web3ProvideSwitcher from '../web3ProvideSwitcher';\n// import { UsdPriceProvider } from './USDPriceContext';\nimport { connectTokenId } from './TokenIdContext';\nimport throttledDrizzelConnect from './throttledDrizzelConnect';\nimport { cat } from '../lib/ipfs';\n// import Img from 'react-image'\n\nconst alternateBasicImage = (index: number) => () =>\n  <div className='image-container'>\n    {window.initialImageDetailsLoaded &&\n      <a href={`${window.initialImageDetails.urls[index]}?ref=alwaysforsale`}>\n        <img\n          src={window.rootCdnUrl + window.initialImageDetails.images[index]}\n          style={{ width: '100%' }}\n        />\n      </a>\n    }\n  </div>\n\nconst throttleCreator = (limit: number) => {\n  let inThrottle = false\n  return function () {\n    if (!inThrottle) {\n      inThrottle = true\n      setTimeout(() => inThrottle = false, limit)\n      return true\n    }\n    return false\n  }\n}\nconst throttle = throttleCreator(1000)\nclass Dapp extends Component<any, any> {\n  contracts: any;\n  utils: any;\n  inputs: any;\n  state: any;\n\n  static contextTypes = {\n    drizzle: PropTypes.object\n  };\n\n  context: any;\n\n  constructor(props: any, context: any) {\n    super(props);\n    // const tokenId = 0;\n    // console.log(context.drizzle.contracts.VitalikSteward.methods.hashes.);\n    //console.log(context.drizzle.contracts['VitalikSteward']['hashes']['0x0']);\n    this.contracts = context.drizzle.contracts;\n    this.utils = context.drizzle.web3.utils;\n    this.context = context;\n\n    this.state = {\n      tokenOwner: '',\n      hasheKey: context.drizzle.contracts.VitalikSteward.methods.hashes.cacheCall(props.tokenId),\n      urlKey: context.drizzle.contracts.VitalikSteward.methods.urls.cacheCall(props.tokenId),\n      hash: null,\n      base64Image: '',\n      websiteUrl: '',\n      totalMonthRevenue: '',\n      hasStartedLoadingIpfsImage: false,\n    };\n  }\n\n  getBase64Image = async (hash: any) => {\n    // console.log('getting bas64 hash')\n\n    this.setState({\n      ...this.state,\n      hasStartedLoadingIpfsImage: true\n    })\n\n    // window.ipfsNode.cat(hash, async (err: any, data: any) => {\n    //   if (err) return console.error(err);\n\n    const data = await cat(hash)\n    // convert Buffer back to string\n    this.setState({\n      ...this.state,\n      base64Image: data.toString()\n    });\n    // })\n  };\n\n  calcTotalMonthRevenue = (ad1: number, ad2: number, ad3: number) => {\n    this.setState({ totalMonthRevenue: (ad1 + ad2 + ad3) })\n  }\n\n  async componentWillReceiveProps(nextProps: any) {\n    // console.log('here')\n\n    if (this.state.urlKey in this.props.contracts['VitalikSteward']['urls'] &&\n      this.state.urlKey in nextProps.contracts['VitalikSteward']['urls']\n    ) {\n      const urlNext =\n        nextProps.contracts['VitalikSteward']['urls'][\n          this.state.urlKey\n        ].value;\n\n      if (this.state.websiteUrl !== urlNext) {\n        this.setState({ ...this.state, websiteUrl: urlNext })\n      }\n    }\n\n    if (\n      this.state.hasheKey in\n      this.props.contracts['VitalikSteward']['hashes'] &&\n      this.state.hasheKey in\n      nextProps.contracts['VitalikSteward']['hashes']\n    ) {\n      const hashNext =\n        nextProps.contracts['VitalikSteward']['hashes'][\n          this.state.hasheKey\n        ].value;\n\n      // console.log('has next hash, checking if it is different:', hashNext)\n      if (this.state.hash !== hashNext) {\n        // console.log(\n        //   'this.state.hash !== hashNext',\n        //   this.state.hash !== hashNext,\n        //   'hashNext !== window.initialImageDetails.images[nextProps.tokenId]',\n        //   hashNext !== window.initialImageDetails.images[nextProps.tokenId],\n        //   'this.state.hasStartedLoadingIpfsImage',\n        //   this.state.hasStartedLoadingIpfsImage,\n        //   '!!window.ipfsNode',\n        //   !!window.ipfsNode,\n        //   'this.state.hasStartedLoadingIpfsImage',\n        //   this.state.hasStartedLoadingIpfsImage,\n        // )\n        // console.log('the next hash is::', hashNext)\n        // console.log('the next hash is::', hashNext)\n        // console.log('the next hash is::', hashNext)\n        // console.log('the next hash is::', hashNext)\n        if (\n          hashNext !== window.initialImageDetails.images[nextProps.tokenId]\n          || !this.state.hasStartedLoadingIpfsImage\n        ) {\n          this.getBase64Image(hashNext)\n        } else {\n          console.log('the ipfs hash won\\'t load this time')\n        }\n        // this.setState({ ...this.state, hash: 'QmSKefBekHMWMPWnYGPQBziGcJD3QtCuw977Dv8VXAJLtb' })\n        this.setState({ ...this.state, hash: hashNext })\n      } else if (!this.state.hasStartedLoadingIpfsImage) {\n        this.getBase64Image(hashNext)\n      }\n    }\n    // });\n    // this.setState({ ...this.state, hashes: newHashes });\n    const { tokenId } = nextProps;\n    const tokenOwnerKey = this.context.drizzle.contracts.ERC721Full.methods.ownerOf.cacheCall(\n      tokenId\n    );\n    const tokenOwnerObj =\n      nextProps.contracts['ERC721Full']['ownerOf'][tokenOwnerKey];\n\n    if (\n      !!tokenOwnerObj &&\n      !!tokenOwnerObj.value &&\n      this.state.tokenOwner !== tokenOwnerObj.value\n    ) {\n      this.setState({\n        ...this.state,\n        tokenOwner: tokenOwnerObj.value\n      });\n    }\n  }\n\n  // shouldComponentUpdate(nextProps: any, nextState: any) {\n  //   // console.log('should update?')\n  //   // return false\n  //   return throttle()\n  // }\n\n  render() {\n    const { tokenOwner } = this.state;\n    const { accounts, tokenId } = this.props;\n    const showDapp = web3ProvideSwitcher.providerInjected;\n    const isTokenOwner = tokenOwner === accounts[0];\n    const displayPreloadedImages = window.initialImageDetailsLoaded\n    const displayImage = !!this.state.base64Image || displayPreloadedImages\n    const imageSrc =\n      !!this.state.base64Image ?\n        this.state.base64Image\n        : window.initialImageDetailsLoaded ?\n          window.rootCdnUrl + tokenId : ''\n    // const altImgUrl = window.initialImageDetailsLoaded ?\n    //   window.rootCdnUrl + window.initialImageDetails.images[tokenId] : ''\n    const adLink = !!this.state.websiteUrl ? this.state.websiteUrl : displayPreloadedImages ? window.initialImageDetails.urls[tokenId] : ''\n\n    // console.log('the image url:', imageUrl)\n    return (\n      <Fragment>\n        <OfflineContainer\n          alternateLoader={alternateBasicImage(tokenId)}>\n          <div className='image-container'>\n            <a href={`${adLink}?ref=alwaysforsale`}>\n              {displayImage && ( //TODO undefined\n                <img\n                  src={imageSrc}\n                  style={{ width: '100%' }}\n                />\n              )}\n            </a>\n            {this.props.displayPurchase && (\n              <div className='interaction-button-container'>\n                <div className='interaction-buttons'>\n                  {isTokenOwner ? (\n                    <div>\n                      <Fragment>\n                        <UpdateModal />\n                        {/* <TokenOverview /> */}\n                      </Fragment>\n                    </div>\n                  ) : (\n                      <div>\n                        {showDapp ? (\n                          <BuyModal />\n                        ) : (\n                            <h3\n                              style={{\n                                margin: 0,\n                                color: '#6bad3e',\n                                padding: '0.8rem 1.2rem',\n                                display: 'inline-block'\n                              }}\n                            >\n                              Install <a href='https://metamask.io'>Metamask</a> to\n                              buy this ad space.\n                          {/* TODO: test if this is moblie and recommend a web3 app for android/iphone (eg trust-wallet)*/}\n                            </h3>\n                          )}\n                        <TokenOverview />\n                      </div>\n                    )}\n                </div>\n              </div>\n            )}\n          </div>\n        </OfflineContainer>\n      </Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = (state: any) => {\n  return {\n    contracts: state.contracts,\n    accounts: state.accounts\n  };\n};\n\n// const throttle = throttleCreator(1000);\n// const TransparentComponent = React.memo((props) => <Dapp {...props}></Dapp>, throttle);\n// const AnotherWrapper = (props: any) => <TransparentComponent {...props}></TransparentComponent>\nconst DappConnected = connectTokenId(throttledDrizzelConnect(1000)(Dapp, mapStateToProps));\n\nclass DappWrapper extends Component<any, any> {\n  constructor(props: any, context: any) {\n    super(props);\n  }\n\n  render() {\n    return (\n      // <UsdPriceProvider>\n      <OfflineContainer alternateLoader={alternateBasicImage(this.props.tokenId)}>\n        <DappConnected displayPurchase={this.props.displayPurchase} tokenId={this.props.tokenId} />\n        {/* <DappConnected throttle={throttleCreator(1000)} displayPurchase={this.props.displayPurchase} tokenId={this.props.tokenId} /> */}\n      </OfflineContainer>\n      // </UsdPriceProvider>\n    );\n  }\n}\n\nexport default DappWrapper;\n","import React, { Fragment } from 'react';\nimport { Modal, Button, Card, Box, Flex } from 'rimble-ui';\n\n\nclass About extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isOpen: false\n        };\n        this.closeModal = this.closeModal.bind(this);\n        this.openModal = this.openModal.bind(this);\n    }\n\n    closeModal(e) {\n        e.preventDefault();\n        this.setState((state, props) => ({\n            isOpen: false\n        }));\n    }\n\n    openModal(e) {\n        e.preventDefault();\n        this.setState((state, props) => ({\n            isOpen: true\n        }));\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <Button onClick={this.openModal} mainColor='#7A7A7A' size=\"small\" className='information-button'>About</Button>\n\n                <Modal isOpen={this.state.isOpen} style={{transform: 'translate(0, -1000px)'}} className='test'>\n                    <Card width={\"60vw\"} p={0}>\n                        <Button.Text\n                            icononly\n                            icon={\"Close\"}\n                            color={\"moon-gray\"}\n                            position={\"absolute\"}\n                            top={0}\n                            right={0}\n                            mt={3}\n                            mr={3}\n                            onClick={this.closeModal}\n                        />\n\n                        <Box p={4} mb={3} className='scrollable-content'>\n                            <Fragment>\n                                <h1>About our always for sale adspace</h1>\n                                <p>\n                                    This project was created at the #ETHIndia2019 hackathon. The purpose of the project is two fold:\n      </p>\n                                <p>\n                                    1. To generate funds for wildlife conservation. How? We created a\n                                    project called wildcards.world at the #ETHCapeTown2019 hackathon to\n                                    raise funds for wildlife conservation. Subsequently, we were accepted into a\n                                    6 month blockchain incubator in Paris to accelerate the developement of\n                                    this platform. The funds generated from our #ETHIndia 'always for sale\n                                    adspace' will provide funding for us to develop our <a href='https://wildcards.world'>wildcards</a> project and\n                                    hence raise funds for conservation efforts.\n      </p>\n                                <p>\n                                    2. This project is a continued social experiment to understand how\n                                    always for sale adspace might behave in a viral marketplace. Many of you\n                may be familiar with the <a href='http://www.milliondollarhomepage.com'>milliondollarhomepage</a> and how this simple\n                                    project sold a million pixels at a dollar each. This rather aims at scarcity and introduces a very interesting concept\n                                    where each piece of marketing real estate will be always for sale,\n                                    forever.\n      </p>\n                                <p>\n                                    The success of this project will allow us to provide always for sale\n                                    plugin marketing solutions to other companies and continue to fund the\n                                    developement of wildcards - the exploration of sustainable solutions\n                                    using an always for sale mechanic.\n      </p>\n                                <p>\n                                    Join our <a href='https://t.me/wildcardsworld'>telegram</a> <br/> \n                                    Email us to chat:&nbsp;\n                                    <a href='jonjon@wildcards.world'>jonjon@wildcards.world</a>\n      </p>\n                                <p>Made by Denham Preen, JonJon Clark and Jason Smythe</p>\n                                <p>Version: 1.0.1</p>\n                            </Fragment>\n                        </Box>\n\n                        <Flex\n                            px={4}\n                            py={3}\n                            borderTop={1}\n                            borderColor={\"#E8E8E8\"}\n                            justifyContent={\"flex-end\"}\n                        >\n                            <Button.Outline onClick={this.closeModal} mainColor='#7A7A7A' size=\"small\">Close</Button.Outline>\n                        </Flex>\n                    </Card>\n                </Modal>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default About;\n","import React, { Fragment } from 'react';\nimport { Modal, Button, Card, Box, Flex } from 'rimble-ui';\n\nclass HowItWorks extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isOpen: false\n    };\n    this.closeModal = this.closeModal.bind(this);\n    this.openModal = this.openModal.bind(this);\n  }\n\n  closeModal(e) {\n    e.preventDefault();\n    this.setState((state, props) => ({\n      isOpen: false\n    }));\n  }\n\n  openModal(e) {\n    e.preventDefault();\n    this.setState((state, props) => ({\n      isOpen: true\n    }));\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <Button onClick={this.openModal} mainColor='#7A7A7A' size=\"small\">How it works?</Button>\n\n        <Modal isOpen={this.state.isOpen}>\n          <Card width={'60vw'} p={0}>\n            <Button.Text\n              icononly\n              icon={'Close'}\n              color={'moon-gray'}\n              position={'absolute'}\n              top={0}\n              right={0}\n              mt={3}\n              mr={3}\n              onClick={this.closeModal}\n            />\n\n            <Box p={4} mb={3} className='scrollable-content'>\n              <Fragment>\n                <h1>How it works?</h1>\n                <p>\n                  1. Log onto our website and a grid showing all 3 advertising\n                  blocks will be displayed.\n                </p>\n                <p>2. All 3 of these blocks will be always on sale… forever.</p>\n                <p>\n                  3. Simply click buy on the block you would like to purchase\n                  (you will need metamask and small amount of ether):\n                </p>\n                <p>\n                  4. Set the the selling price for your block (this allows our\n                  blocks to be always for sale. If you set the selling price at\n                  say 2 ETH, you will receive 2 ETH if someone buys this block\n                  from you - making money while advertising, pretty neat right?)\n                </p>\n                <p>\n                  5. Add a deposit in ETH to pay for owning the space. If you\n                  set the selling price at 2 ETH, you will have to pay 2 ETH per\n                  month in order to keep this ad space. (The funds generated\n                  from this project are going towards funding our wildcards\n                  project which in turn funds conservation. We got into a 6\n                  month Paris blockchain incubator, but we need to self fund.)\n                </p>\n                <p>\n                  6. Now you own the block congrats! If you refresh the page you\n                  will be allowed to upload a logo of your company and add your\n                  website link. Anyone who visits the webpage will now see you\n                  company displayed in that block, until someone buys that block\n                  from you, or your deposit runs out.\n                </p>\n              </Fragment>\n            </Box>\n\n            <Flex\n              px={4}\n              py={3}\n              borderTop={1}\n              borderColor={'#E8E8E8'}\n              justifyContent={'flex-end'}\n            >\n              <Button.Outline mainColor='#7A7A7A' size=\"small\" onClick={this.closeModal}>Close</Button.Outline>\n            </Flex>\n          </Card>\n        </Modal>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default HowItWorks;\n","import React, { createContext, useContext, useRef, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const PreloadImageContext = createContext<any>('');\n\ninterface ProviderProps {\n  children: any,//React.Component\n}\n\nexport const PreloadImageProvider: React.FunctionComponent<ProviderProps> = ({ children }) => {\n  const isLoaded = useRef(window.initialImageDetailsLoaded);\n\n  useEffect(\n    () => {\n      isLoaded.current = window.initialImageDetailsLoaded\n    },\n    [window.initialImageDetailsLoaded]\n  );\n  return <PreloadImageContext.Provider value={{ isLoaded: isLoaded.current, anotherValue: 'test' }}>\n    {children}\n  </PreloadImageContext.Provider>\n};\n\nPreloadImageProvider.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport const usePreloadImage = () => useContext(PreloadImageContext);\n\nexport const connectPreloadImage = (WrappedComponent: any) => {\n  return (props: any) => {\n    const preloadImage = usePreloadImage()\n    const newProps = { ...props, preloadImage }\n    return <WrappedComponent {...newProps} />\n  }\n}\n","import React, { Component } from \"react\"\nimport PropTypes from 'prop-types'\nimport ToggleButton from 'react-toggle-button'\nimport Dapp from \"./Dapp\"\nimport About from './About'\nimport HowItWorks from './HowItworks';\nimport { TokenIdProvider } from \"./TokenIdContext\";\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.min.css';\n// import { UsdPriceProvider } from './USDPriceContext';\nimport { PreloadImageProvider, connectPreloadImage } from \"./PreloadedImageContext\";\nimport OfflineContainer from \"./Offline\";\n\ntype displayPurchaseState = {\n  displayPurchase: boolean,\n};\n\n// declare global {\n//   interface Window { ipfsNode: any; }\n// }\n\n// window.ipfsNode = window.ipfsNode || {};\n\nclass TotalRaised extends Component<any, displayPurchaseState> {\n  state: any\n\n  static contextTypes = {\n    drizzle: PropTypes.object\n  };\n\n  constructor(props: any, context: any) {\n    super(props)\n\n    this.state = {\n      pricesSet: false,\n      prices: [0, 0, 0]\n    };\n  }\n  async componentDidMount() {\n    if (!this.context.drizzle || this.state.pricesSet) return\n\n\n    const { web3: { utils }, contracts } = this.context.drizzle\n    const prices = await Promise.all(this.state.prices.map(async (_: any, i: any) => {\n      const foreclosedPromise = contracts.VitalikSteward.methods.foreclosed(i).call()\n      const price: any = await contracts.VitalikSteward.methods.price(i).call()\n      const foreclosed = await foreclosedPromise\n\n      return (foreclosed) ?\n        0 : parseFloat(utils.fromWei(new utils.BN(price), 'ether').toString())\n    }))\n    this.setState({\n      ...this.state,\n      prices,\n      pricesSet: true\n    })\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        {this.state.pricesSet &&\n          <h4 style={{ color: 'white', textAlign: 'center' }}>This homepage is currently in line to make {this.state.prices.reduce((tot: number, num: number) => tot + num).toFixed(4)} ETH per month based on current ad space prices</h4>\n        }\n      </React.Fragment>\n    );\n  }\n}\n\nclass Template extends Component<any, displayPurchaseState> {\n  state: displayPurchaseState\n\n  constructor(props: any, context: any) {\n    super(props)\n\n    this.state = {\n      displayPurchase: false,\n    };\n  }\n  componentWillMount() {\n    if (!this.props.drizzleLoaded) {\n      toast.info(\"Our contracts are bullet proof and our frontend is being improved to match it too\", {\n        position: \"top-right\",\n        autoClose: 6000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true\n      });\n      setTimeout(() => {\n        toast.info(\"We are on the crisp chat below please message us with any questions\");\n      }, 6400)\n    }\n  }\n\n  render() {\n    const drizzleLoaded = this.props.drizzleLoaded\n    const imageDataLoaded = window.initialImageDetailsLoaded\n\n    return (\n      <div>\n\n        <header>\n          <ToastContainer />\n          <h1>\n            These ads are always for sale, purchase the ad space and set your own monthly payment...\n            <br /> even make a profit when someone buys the ad space from you\n            </h1>\n          {drizzleLoaded && <React.Fragment>\n            <ToggleButton\n              value={this.state.displayPurchase || false}\n              onToggle={() => {\n                this.setState({\n                  displayPurchase: !this.state.displayPurchase,\n                })\n              }} />\n            <label>\n              <span style={{ color: 'white' }}>Click toggle to buy ad</span>\n            </label>\n          </React.Fragment>}\n\n        </header>\n\n        <div className=\"Grid\">\n          {/* <UsdPriceProvider> */}\n          {([0, 1, 2]).map(i => <div key={i} className=\"Grid-item\">\n            {drizzleLoaded ?\n              <TokenIdProvider tokenId={i}>\n                <Dapp displayPurchase={this.state.displayPurchase} tokenId={i} />\n              </TokenIdProvider>\n              :\n              <div className='image-container'>\n                <a href={`${imageDataLoaded ? window.initialImageDetails.urls[i] : '_'}?ref=alwaysforsale`}>\n                  <img\n                    src={window.rootCdnUrl + i}\n                    style={{ width: '100%' }}\n                  ></img>\n                </a>\n              </div>\n            }\n          </div>)}\n          {/* </UsdPriceProvider> */}\n        </div>\n        <footer>\n          <div className='socials'>\n            <div\n              className='fb-share-button'\n              data-href='http://alwaysforsale.io'\n              data-layout='button'\n              data-size='small'\n            >\n              <a\n                target='_blank'\n                href='https://www.facebook.com/sharer/sharer.php?u=http%3A%2F%2Falwaysforsale.io%2F&amp;src=sdkpreparse'\n                className='fb-xfbml-parse-ignore'\n              >\n                Share\n              </a>\n            </div>\n            <div>\n              <a\n                href='https://twitter.com/intent/tweet?button_hashtag=Alwaysforsale.io&ref_src=twsrc%5Etfw'\n                className='twitter-hashtag-button'\n                data-show-count='false'\n              >\n                Tweet #Alwaysforsale\n              </a>\n            </div>\n          </div>\n          <div className='more-info'>\n            <About />\n            <br />\n            <HowItWorks />\n          </div>\n        </footer>\n        {drizzleLoaded && <OfflineContainer alternateLoader={React.Fragment}>\n          <TotalRaised />\n        </OfflineContainer>\n        }\n      </div>\n    );\n  }\n}\n\nconst InnerComponent = connectPreloadImage(Template)\n\nexport default (props: any) => {\n  return <PreloadImageProvider>\n    <InnerComponent {...props} />\n  </PreloadImageProvider>;\n}\n","import React, { Component, Suspense } from \"react\";\n\n// import DrizzleProvider from \"./DrizzelProvider\";\nimport Template from \"./components/Template\";\n\nimport './app.css'\nimport UploadImage from \"./components/UploadImage\";\n\nconst DrizzleProvider = React.lazy(() => import('./DrizzleProvider'));\n\nclass App extends Component {\n  render() {\n    return (\n      <Suspense fallback={<Template drizzleLoaded={false} />}>\n        <DrizzleProvider>\n          <Template drizzleLoaded={true} />\n        </DrizzleProvider>\n      </Suspense>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport AppRoutes from './App';\n\nReactDOM.render(<AppRoutes />, document.getElementById('root'));\n"],"sourceRoot":""}